---
- name: Install dependencies
  ansible.builtin.package:
    name:
      - python3
      - python3-pip
      - python3-venv
  state: present

- name: Create application user ({{ app_user }})
  ansible.builtin.user:
    name: "{{ app_user }}"
    state: present
    system: yes
    create_home: no
    shell: /usr/sbin/nologin
  tags: [deploy, config]

- name: Create application directory
  ansible.builtin.file:
    path: "{{ app_base_path }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: '0755'
  tags: [deploy]

- name: Copy application files
  ansible.builtin.copy:
    src: app/
    dest: "{{ app_base_path }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
  notify: Restart Gunicorn
  tags: [deploy]

- name: Create Python virtual environment
  ansible.builtin.command: "python3 -m venv {{ app_base_path }}/venv"
  args:
    creates: "{{ app_base_path }}/venv/bin/pip"
  tags: [install, deploy]

- name: Install application dependencies from requirements.txt
  ansible.builtin.pip:
    requirements: "{{ app_base_path }}/requirements.txt"
    executable: "{{ app_base_path }}/venv/bin/pip"
  notify: Restart Gunicorn
  tags: [install, deploy]

- name: Wait for the database to be ready
  ansible.builtin.wait_for:
    host: "{{ db_host }}"
    port: 5432 # Порт PostgreSQL
    delay: 5
    timeout: 60
  tags: [deploy, db_migrate]

- name: Check if migrations directory exists
  ansible.builtin.stat:
    path: "{{ app_base_path }}/migrations"
  register: migrations_dir
  become: yes
  become_user: "{{ app_user }}"
  tags: [deploy, db_migrate]

- name: Initialize Flask-Migrate (only on first run)
  ansible.builtin.command: "{{ app_base_path }}/venv/bin/flask db init"
  args:
    chdir: "{{ app_base_path }}"
  environment:
    FLASK_APP: "main.py"
  when: not migrations_dir.stat.exists
  become: yes
  become_user: "{{ app_user }}"
  tags: [deploy, db_migrate]

- name: Run database migrations
  ansible.builtin.command: "{{ app_base_path }}/venv/bin/flask db upgrade"
  args:
    chdir: "{{ app_base_path }}"
  environment:
    FLASK_APP: "main.py"
    DB_HOST: "{{ db_host }}"
    DB_USER: "{{ db_user }}"
    DB_PASSWORD: "{{ db_password }}"
    APP_NAME: "{{ app_name }}"
  register: migration_result
  changed_when: "'Running upgrade' in migration_result.stdout"
  become: yes
  become_user: "{{ app_user }}"
  tags: [deploy, db_migrate]

- name: Create Gunicorn systemd service file
  ansible.builtin.template:
    src: gunicorn.service.j2
    dest: "/etc/systemd/system/gunicorn_{{ app_name }}.service"
    owner: root
    group: root
    mode: '0644'
  notify:
    - Reload systemd daemon
    - Restart Gunicorn
  tags: [config, deploy]

- name: Ensure Gunicorn service is enabled and started
  ansible.builtin.systemd:
    name: "gunicorn_{{ app_name }}.service"
    state: started
    enabled: yes
  tags: [deploy]
