---
- name: Update apt cache (Debian/Ubuntu)
  ansible.builtin.apt:
    update_cache: yes
  become: yes
  when: ansible_os_family == 'Debian'
  tags:
    - install

- name: Update yum cache (CentOS/RHEL)
  ansible.builtin.yum:
    update_cache: yes
  become: yes
  when: ansible_os_family == 'RedHat'
  tags:
    - install

- name: Install Python3 and pip
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  become: yes
  loop:
    - python3
    - python3-pip
  tags:
    - install

- name: Ensure python3-venv is installed
  ansible.builtin.apt:
    name: python3-venv
    state: present
  when: ansible_os_family == "Debian"
  become: yes

- name: Create Python virtual environment
  ansible.builtin.command: python3 -m venv /opt/{{ app_name }}/venv
  args:
    creates: /opt/{{ app_name }}/venv/bin/pip
  become: yes

- name: Install Gunicorn into virtual environment
  ansible.builtin.pip:
    name: gunicorn
    executable: /opt/{{ app_name }}/venv/bin/pip
  become: yes

- name: Add app_user to www-data group
  ansible.builtin.user:
    name: "{{ app_user }}"
    groups: www-data
    append: yes
  become: yes
  tags:
    - users
    - deploy

- name: Create Gunicorn runtime directory
  ansible.builtin.file:
    path: "/run/gunicorn_{{ app_name }}"
    state: directory
    owner: "{{ app_user }}"
    group: www-data
    mode: '0775'
  become: yes
  tags:
    - config
    - deploy

- name: Create Gunicorn systemd service file
  ansible.builtin.template:
    src: gunicorn.service.j2
    dest: "/etc/systemd/system/gunicorn_{{ app_name }}.service"
    owner: root
    group: root
    mode: '0644'
  become: yes
  notify:
    - Reload systemd daemon
    - Restart Gunicorn

- name: Ensure Gunicorn service is enabled and started
  ansible.builtin.systemd:
    name: "gunicorn_{{ app_name }}.service"
    state: started
    enabled: yes
    daemon_reload: yes
  become: yes

- name: Create application user ({{ app_user }})
  ansible.builtin.user:
    name: "{{ app_user }}"
    state: present
    system: yes
    create_home: no
    shell: /usr/sbin/nologin
  become: yes

- name: Create application directory
  ansible.builtin.file:
    path: "{{ app_base_path }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: '0755'
  become: yes
  tags:
    - deploy

- name: Copy application files
  ansible.builtin.copy:
    src: app/
    dest: "{{ app_base_path }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: '0644'
  become: yes
  notify: restart app
  tags:
    - deploy

- name: Install application dependencies from requirements.txt
  ansible.builtin.pip:
    requirements: "{{ app_base_path }}/requirements.txt"
    executable: "{{ app_base_path }}/venv/bin/pip"
  become: yes
  notify: Restart Gunicorn
  tags:
    - deploy

- name: Copy Systemd service file
  ansible.builtin.template:
    src: app.service.j2
    dest: /etc/systemd/system/{{ app_service_name }}.service
    owner: root
    group: root
    mode: '0644'
  become: yes
  notify:
    - reload systemd
    - restart app
  tags:
    - config

- name: Ensure app service is running and enabled
  ansible.builtin.service:
    name: "{{ app_service_name }}"
    state: started
    enabled: yes
  become: yes
  tags:
    - deploy

#- name: Run database migrations
#  block:
#    - name: Try to run migrations
#      ansible.builtin.command: "/opt/{{ app_name }}/venv/bin/flask db upgrade"
#      args:
#        chdir: "/opt/{{ app_name }}"
#      environment:
#          FLASK_APP: "main:app"
#      become: yes
#      become_user: "{{ app_user }}"
#      register: migration_result
#      changed_when: "migration_result.stdout is search('Running migration')"
#      tags:
#        - deploy
#        - db_migrate

#    - name: Report successful migration
#      ansible.builtin.debug:
#        msg: "Database migration completed successfully: {{ migration_result.stdout }}"
#      when:
#        - migration_result is defined
#        - migration_result is changed
#  rescue:
#    - name: Handle migration failure
#      ansible.builtin.debug:
#        msg: "WARNING: Database migration failed! Error: {{ ansible_failed_result.stderr }}"
#      failed_when: false
#      tags:
#        - deploy
#        - db_migrate

#    - name: Stop app service after migration failure
#      ansible.builtin.systemd:
#        name: "gunicorn_{{ app_name }}.service"
#        state: stopped
#      become: yes
#      when: migration_result is failed
#      tags:
#        - deploy
#        - db_migrate
#  always:
#    - name: Cleanup temporary migration files
#      ansible.builtin.file:
#        path: "/opt/{{ app_name }}/temp_migration_file.txt"
#        state: absent
#      when: migration_result is defined
#      tags:
#        - deploy
#        - db_migrate
